{
  "hash": "625e600a5db511fb13471c0ebceb75ae",
  "result": {
    "markdown": "# War at Night {.unnumbered}\n\n\n## Data\nSatellite images of Syria taken at night capture a subtle trace left by human civilization: lights. Apartment buildings, street lights, highways, powerplants-- all are illuminated at night and can be seen from space. Researchers often use these nighttime lights signatures to track development; as cities grow, villages recieve power, and infrastructure is built, areas emit more light. But this works both ways. As cities are demolished, villages burned, and highways cutoff, they stop emitting lights. \n\nThe timelapse below uses imagery from the Defense Meteorological Satellite Program (DMSP), a joint program run by the U.S. Department of Defense and the National Oceanographic and Atmospheric Agency. One image is taken per year between 2005 and 2013:\n\n\n## Ukraine\n\n### Pre-Processing\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#%pip install geemap\n%pip install ee\nimport ee\nimport geemap\n#Map = geemap.Map()\n#Map.split_map()\njs_snippet = \"\"\"\n// define the Area of Interest (AOI)\nvar AOI = ee.FeatureCollection(\"FAO/GAUL_SIMPLIFIED_500m/2015/level0\")\n.filter(ee.Filter.eq('ADM0_NAME', \"Ukraine\")).geometry()\n\n\n// A palette to visualize the VIIRS imagery. This one is similar to Matplotlib's \"Magma\" palette. \nvar viirs_palette = [\n\"blue\",\"white\",'red'\n];\n\n// Visualisation parameters for the VIIRS imagery, defining a minimum and maximum value, and referencing the palette we just created\nvar VIIRSvis = { min: -20, max: 20, palette: viirs_palette };\n\nvar VIIRS= ee.ImageCollection(\"NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG\") \n                    .select('avg_rad')\n                    // Calculate the sum of the 'avg_rad' band within the AOI\n                    .map(function(image) { \n                    // We're also going to take a base 10 log of the image-- this will help us visualize the data by dampening extreme values             \n                    return image.resample('bicubic')//.log10().unmask(0)\n                    })\n                    // Finally, we filter the collection to the specified date range\n\nvar before=VIIRS.filterDate('2022-02-01', '2022-03-01').mean().clip(AOI)\nvar after=VIIRS.filterDate('2022-03-01', '2022-04-01').mean().clip(AOI)\n\nvar change=after.subtract(before)\nMap.setOptions('HYBRID')\nMap.centerObject(AOI)\nMap.addLayer(change,VIIRSvis,'Nighttime Lights')\n\"\"\"\n\ngeemap.js_snippet_to_py(js_snippet)\n#Map\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCollecting ee\r\n  Using cached ee-0.2.tar.gz (3.0 kB)\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCollecting blessings\r\n  Using cached blessings-1.7-py3-none-any.whl (18 kB)\r\nRequirement already satisfied: six in /Users/ollieballinger/.pyenv/versions/3.9.5/lib/python3.9/site-packages (from blessings->ee) (1.15.0)\r\nBuilding wheels for collected packages: ee\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Building wheel for ee (setup.py) ... -\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\b \bdone\r\n  Created wheel for ee: filename=ee-0.2-py3-none-any.whl size=3675 sha256=43ae969223590b4729192598410a563318d951ff305e77b5c6c683e6784bbbc2\r\n  Stored in directory: /Users/ollieballinger/Library/Caches/pip/wheels/0d/6c/c0/f17fb105d1ad88aa5aff8067de0ebf7e141ea81f0df52535b9\r\nSuccessfully built ee\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nInstalling collected packages: blessings, ee\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSuccessfully installed blessings-1.7 ee-0.2\r\nWARNING: You are using pip version 21.1.2; however, version 22.2.2 is available.\r\nYou should consider upgrading via the '/Users/ollieballinger/.pyenv/versions/3.9.5/bin/python -m pip install --upgrade pip' command.\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNote: you may need to restart the kernel to use updated packages.\n```\n:::\n:::\n\n\n### Analysis\n\n\n## Iraq \n\nA link to the GEE code for this section can be found [here](https://code.earthengine.google.com/2cf77d8cb9afd76b73100637fbffdf5d). \n\n### Pre-Processing\n\nFirst, let's start by importing a few useful packages written by [Gennadii Donchyts](https://twitter.com/gena_d). We'll use `utils` and `text` to annotate the date of each image on the timelapse. We'll also define an Area of Interest (AOI), which is just a rectangle. You can do this manually by clicking the drawing tools in the top left. I've drawn an AOI over the area covering Mosul, Irbil, and Kirkuk in Northern Iraq. \n\n``` js\nvar utils = require(\"users/gena/packages:utils\");\nvar text = require(\"users/gena/packages:text\");\n\n// define the Area of Interest (AOI)\nvar AOI = ee.Geometry.Polygon(\n        [[[42.555362833405326, 36.62010778397765],\n          [42.555362833405326, 35.18296243288332],\n          [44.681217325592826, 35.18296243288332],\n          [44.681217325592826, 36.62010778397765]]])\n\n// start and end dates for our gif \nvar startDate = '2013-01-01';\nvar endDate = '2018-01-01';\n\n// a filename for when we export the gif\nvar export_name='qayyarah_viirs'\n          \n// A palette to visualize the VIIRS imagery. This one is similar to Matplotlib's \"Magma\" palette. \nvar viirs_palette = [\n  \"#000004\",\n  \"#320a5a\",\n  \"#781b6c\",\n  \"#bb3654\",\n  \"#ec6824\",\n  \"#fbb41a\",\n  \"#fcffa4\",\n];\n\n// Visualisation parameters for the VIIRS imagery, defining a minimum and maximum value, and referencing the palette we just created\nvar VIIRSvis = { min: -0.1, max: 1.6, palette: viirs_palette };\n```\n\nNext, we'll load the VIIRS nighttime lights imagery. We want to select the `avg_rad` band of the image collection, and filter blank images. Sometimes, we get blank images over an area in VIIRS if our AOI is on the edge of the satellite's imaging swath. We can filter these images, similarly to how we filter for cloudy images in Sentinel-2:\n\n``` js\nvar VIIRS= ee.ImageCollection(\"NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG\") \n                    .select('avg_rad')\n                    // Calculate the sum of the 'avg_rad' band within the AOI\n                    .map(function(image) { \n                    var blank=image.reduceRegions({\n                                    collection: AOI, \n                                    reducer: ee.Reducer.sum(), \n                                    scale: 10})\n                                .first()\n                                .get('sum')\n                    // For each image, define a property 'blank' that stores the sum of the 'avg_rad' band within the AOI. \n                    // We're also going to take a base 10 log of the image-- this will help us visualize the data by dampening extreme values             \n                    return image.set('blank', blank).log10().unmask(0)\n                    })\n                    // Now, we can filter images which are fully or partially blank over our AOI\n                    .filter(ee.Filter.gt('blank', 10))\n                    // Finally, we filter the collection to the specified date range\n                    .filterDate(startDate, endDate)\n                    \n```\nLet's have a look at the first image in the collection to make sure everything's looking right. We'll set the basemap to satellite and center our AOI:\n\n``` js\nMap.setOptions('HYBRID')\nMap.centerObject(AOI)\nMap.addLayer(VIIRS.first(),VIIRSvis,'Nighttime Lights')\n```\n![](./images/iraq_check.png)\n\nIf we decrease the opacity of the VIIRS layer, we can see the cities of Mosul, Erbil, and Kirkuk shining brightly at night. We can also see a string of bright lights between Kirkuk and Erbil-- these are methane flares from oil wells. \n\n### Analysis\n\nHaving pre-processed the VIIRS imagery, we can now define a function `gif` that will take: \n\n1. An image collection (`col`, in this case the nighttime lights imagery `VIIRS`)\n2. Visualization parameters (`col_vis`, in this case `VIIRSvis`)\n3. An Area of Interest `AOI`\n\nThe function will then return a timelapse.\n\n``` js\nvar gif = function (col, col_vis, AOI) {\n\n    // Define the date annotations to be printed in the top left of the gif in white\n  var annotations = [\n    {\n      textColor: \"white\",\n      position: \"left\",\n      offset: \"1%\",\n      margin: \"1%\",\n      property: \"label\",\n      // Dynamically size the annotations according to the size of the AOI\n      scale: AOI.area(100).sqrt().divide(200),\n    },\n  ];\n\n    // Next, we want to map over the image collection,\n    var rgbVis = col.map(function (image) {\n        // Get the date of the image and format it\n        var start = ee.Date(image.get(\"system:time_start\"));\n        var label = start.format(\"YYYY-MM-dd\");\n        // And visualize the image using the visualization parameters defined earlier.\n        // We also want to set a property called \"label\" that stores the formatted date \n        return image.visualize(col_vis).set({ label: label });\n  });\n\n    // Now we use the label proprty and the annotateImage function from @gena_d to annotate each image with the date. \n  rgbVis = rgbVis.map(function (image) {\n    return text.annotateImage(image, {}, AOI, annotations);\n  });\n\n  // Define GIF visualization parameters.\n  var gifParams = {\n    maxPixels: 27017280,\n    region: AOI,\n    crs: \"EPSG:3857\",\n    dimensions: 640,\n    framesPerSecond: 5,\n  };\n\n  // Export the gif to Google Drive\n  Export.video.toDrive({\n    collection: rgbVis,\n    description: export_name,\n    dimensions: 1080,\n    framesPerSecond: 5,\n    region: AOI,\n  });\n  // Print the GIF URL to the console.\n  print(rgbVis.getVideoThumbURL(gifParams));\n\n  // Render the GIF animation in the console.\n  print(ui.Thumbnail(rgbVis, gifParams));\n};\n```\nOk that was a pretty big chunk of code. But the good news is that we basically never have to touch it again, since we can just feed it different inputs. For example, if I want to generate a gif of nighttime lights over a different area, it's as simple as dragging the AOI. If I want to look at a different time period, I can just edit the `startDate` and `endDate` variables. And if I want to visualize an entirely different type of satellite imagery-- Sentinel-1, Sentinel-2, or anything else, all I have to do is change the image collection (`col`) and visualization parameters (`col_vis`) variables. Now, let's look at some timelapses. \n\n#### The Fall of Mosul\n\nThe function returns a timelapse of nighttime lights over Northern Iraq: \n``` js \ngif(VIIRS, VIIRSvis, AOI);\n```\n![I've done a bit of post-processing to this gif, adding more annotations and blending between frames to make it a bit smoother. I typically use [ffmpeg](https://ffmpeg.org/) and [ezgif](https://ezgif.com/) for the finishing touches. ](./images/Figure_1.gif)\n\nThis timelapse gives a play-by-play of one of the most important campaigns in the war against the Islamic State. In the first few frames, Mosul is under the control of the Kurdistan Regional Government (KRG). In the summer of 2014, ISIS captures the city, and power is cut off. Mosul and many villages along the Tigris river are plunged into darkness. In 2015, the front line in the campaign to retake the city emerges around Mosul, advancing in 2016 and 2017. Mosul is eventually retaken by the KRG in 2017, after which it brightens once again as electricity is restored. \n\n#### The Qayyarah Fires\n\nFarther south, there is an interesting detail. Above the \"h\" in \"Qayyarah\", a bright set of lights emerges just before Mosul is recaptured, around December 2016. Fleeing Islamic State fighters [set fire to the Qayyarah oilfields](https://time.com/iraq-fires/), which burned for months. \n\nUsing the VIIRS data we've already loaded, we can further analyze the effect of the conflict using a chart. First, let's define two rectangles (again, you can draw these) over Mosul and Qayyarah:\n\n``` js\nvar mosul = ee.Feature(\n        ee.Geometry.Polygon(\n            [[[43.054977780266675, 36.438274276521234],\n              [43.054977780266675, 36.290642221212416],\n              [43.24792516796199, 36.290642221212416],\n              [43.24792516796199, 36.438274276521234]]], null, false),\n        {\n          \"label\": \"Mosul\",\n          \"system:index\": \"0\"\n        }),\n\n    qayyarah = ee.Feature(\n        ee.Geometry.Polygon(\n            [[[43.08240275545117, 35.8925587996721],\n              [43.08240275545117, 35.77899970860588],\n              [43.26642375154492, 35.77899970860588],\n              [43.26642375154492, 35.8925587996721]]], null, false),\n        {\n          \"label\": \"Qayyarah\",\n          \"system:index\": \"0\"\n        })\n\n// Let's put these together in a list \nvar regions=[qayyarah, mosul]\n``` \nOnce we've got the rectangles, we can make a chart that will take the mean value of the VIIRS images in each rectangle over time:\n\n``` js\nvar chart =\n    ui.Chart.image\n        .seriesByRegion({\n          imageCollection: VIIRS,\n          regions: regions,\n          reducer: ee.Reducer.mean(),\n          seriesProperty:'label'\n        }).setOptions({\n          title: 'Nighttime Lights'\n        });\n        \nprint(chart)\n```\n![](./images/qayyarah_chart.png)\n\nWe can clearly see Mosul (the red line) darkening in 2014 as the city is taken by ISIS. During this period the Qayyarah oilfileds are, as we might expect, quite dark. All of a sudden in 2016 Qayyarah becomes brighter at night than the city of Mosul ever was, as the oilfields are set on fire. Then, almost exactly when the blaze in Qayyarah is extinguished and the area darkens (i.e. when the blue line falls back to near zero), Mosul brightens once again (i.e. the red line rises) as the city is liberated.\n\n\n### The Battle for Aleppo \n\nThe images below were taken between 2012 and 2014. Vast swaths of the city darken as neighbourhoods are razed by fighting.\n\n<timelapse>\n\nThough this is a trend that can be observed across the country, nowhere is the decline in nightlights more visible than in Aleppo. Below is a comparison of longitudinal trends in nighlights signatures between several cities:\n\n<graph>\n\nThe most salient trend is Aleppo plummeting over the course of 2012, and becoming steadily darker over the course of the next four years. Raqqa drops in 2012 as well, but remains in flux until 2017, when the battle to reclaim the city pluges it into near total darkness. Damascus also experiences a dip in 2012, but stabilizes relatively quickly. The Turkish city of Gaziantep-- less than 100km from Aleppo and roughly 1/5th the size-- stands in stark contrast to the Syrian cities, becoming progressively brighter over the entire period. \n\nAnother interesting pattern here is the difference in seasonal trends in nightlights. Under normal circumstances in this part of the world, cities become brighter at night during the summer months. Restaurants, bars, and markets stay open later and conduct business outdoors. Gaziantep, which still attracts scores of tourists every year, displays pronounced seasonality. Damascus, the most stable of the three Syrian cities, also maintains a seasonal trend throughout the war. In contrast, both Raqqa and Aleppo maintain extremely low and roughly constant levels of nightlights year-round during the periods following intense fighting. \n\nReliable economic data for Syria haven't been available for nearly a decade, and assessing the country's recovery is consequently difficult. But subtle indications of economic growth are visible above: all three Syrian cities have been on a steady upward trend since 2017, and beginning to display seasonal variation once again. \n\n### Fighting for Oil \n\nThroughout the war, sudden massive spikes in nightlights signatures can be observed throughout the country. In the center of the map just west of Palmyra, some particularly large spikes occur in 2017:\n\nThese flashes of light show gas wells being set on fire, a common form of sabotage carried out by retreating Islamic State fighters. Modified Sentinel-2 imagery of the Hayyan gas field (indicated by the green box above) shows this in greater detail. Substituing the Red band in an RGB image with Near Infrared (NIR) highlights thermal signatures, showing fires burning brightly even during the day. \n\nThe large complex on the right is the Hayyan Gas Plant, which produced nearly 1/3 of Syria's electricity. The plant and its associated wells changed hands several times throughout the war, but were under Islamic State control until February 2017. In the video below, Islamic State fighters can be seen rigging the plant with explosives and destroying it on January 8th:\n\nIn February, three Russian oil and gas companies (Zarubij Naft, Lukoil and Gazprom Neft) were given restoration, exploration, and production rights to the hydrocarbon deposits West of Palmyra. On January 12th, 2017, the Syrian Army's 5th Legion and Russian special forces launched a counterattack known as the \"Palmyra offensive\", with the aim of retaking several important hydrocarbon deposits including Hayyan. \n\nThe timing of well fires aligns closely with a detailed timeline of the campaign.The Near Infrared Sentinel-2 image below shows the layout of the Hayyan Gas Plant and the wells in the Hayyan gas field:\n\nThe Syrian Army took the Hayyan gas field on [February 4th](https://www.almasdarnews.com/article/syrian-army-liberates-hayyan-gas-fields-west-palmyra/), and retreating ISIS fighters set fire to wells 1, and 3. However, ISIS managed to briefly retake the Hayyan field on [February 7th](https://www.almasdarnews.com/article/isis-retakes-hayyan-gas-fields-new-bid-expand-west-palmyra/), setting fire to wells 2 and 4. These moments in the Palmyra Offensive are captured in NIR signatures\n\nInterestingly, despite the massive explosion caused by the bombing of the Hayyan Gas Plant, no prolonged thermal anomalies were detected over the area of the plant itself. The well fires, on the other hand, lasted for months. Below is an image of well fire at the Hayyan field taken from this [video](https://www.youtube.com/watch?v=WFe9abYyqK0); based on the nearby infrastructure and date (04/02/2017) of posting, it is likely Well-3. \n\n",
    "supporting": [
      "SyriaNTL_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}